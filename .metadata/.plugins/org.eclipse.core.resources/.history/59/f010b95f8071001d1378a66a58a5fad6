package tcp_socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
//import java.util.concurrent.ArrayBlockingQueue;

public class client {

	public static Statement createStatement(Connection connection) {
		Statement statement;
		try {
			statement = connection.createStatement();
			return statement;
		} catch (SQLException e) {
//			e.printStackTrace();
			return null;
		}
	}
	public static Connection connectToDatabase(String databaseName,String userName,String pass) {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			try {
				return DriverManager.getConnection("jdbc:mysql://localhost:3306/"+databaseName,userName,pass);
			} catch (SQLException e) {
//				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
//			e.printStackTrace();
		}
		return null;
	}
	public static void getCredientials() {
		
	}
	public static void main(String[] args) {
		
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		String option="";
		String userName = "";
		String pass = "";
		while(true) {
			System.out.println("1. Enter User/pass");
			System.out.println("2. Go with default");
			System.out.print("Enter option: ");
			option = sc.nextLine();
			if(option.equals("1")) {
				System.out.print("Enter username: ");
				userName = sc.nextLine();
				System.out.print("Enter pass: ");
				pass = sc.nextLine();
				break;
			}
			else if(option.equals("2")) {
				userName = "root";
				pass = "bocoX9";
				break;
			}
			else {
				System.out.println("Invalid Option");
			}
		}
		Connection connection_db = connectToDatabase("db",userName,pass);
		if(connection_db == null) {
			System.out.println("Couldn't connect to database");
			return;
		}
		System.out.println("Connected to database");
		/////////////////////////////////////////
		String customer_data_query = "SELECT * FROM customers";
		ResultSet customers_data = null;
		Statement customer_statement = createStatement(connection_db);
		if(customer_statement == null) {
			System.out.println("Couldn't create customer statement for query");
			return;
		}
		try {
			customers_data = customer_statement.executeQuery(customer_data_query);
		} catch (SQLException e) {
			System.out.println("Couldn't execute customer query");
			e.printStackTrace();
			return;
		}
		Hashtable<String, String> customers_hashtable = new Hashtable<>();
		String customer_id = "";
		String customer_name = "";
		try {
			while(customers_data.next()) {
				customer_id = customers_data.getString("CUSTOMER_ID");
				customer_name = customers_data.getString("CUSTOMER_NAME");
				customers_hashtable.put(customer_id, customer_name);
//				System.out.println(customer_name);
			}
		} catch (SQLException e) {
			System.out.println("Error in customers data");
			e.printStackTrace();
			return;
		}
		////////////////////////////////////////////
		String product_data_query = "SELECT * FROM products";
		ResultSet products_data = null;
		Statement product_statement = createStatement(connection_db);
		if(product_statement == null) {
			System.out.println("Couldn't create product statement for query");
			return;
		}
		try {
			products_data = product_statement.executeQuery(product_data_query);
		} catch (SQLException e) {
			System.out.println("Couldn't execute product query");
			e.printStackTrace();
			return;
		}
		Map<String, String> temp = new HashMap<>();
		Hashtable<String, Map<String, String>> product_hashtable = new Hashtable<>();		
		String product_id = "";
		String product_name = "";
		String supplier_id = "";
		String supplier_name = "";
		Double price=0.0;
		try {
			while(products_data.next()) {
				Map<String, String> product_supplier_data = new HashMap<>();
				product_id = products_data.getString("PRODUCT_ID");
				
				product_name = products_data.getString("PRODUCT_NAME");
				product_supplier_data.put("PRODUCT_NAME", product_name);
				
				supplier_id = products_data.getString("SUPPLIER_ID");
				product_supplier_data.put("SUPPLIER_ID", supplier_id);
				
				supplier_name = products_data.getString("SUPPLIER_NAME");
				product_supplier_data.put("SUPPLIER_NAME", supplier_name);
				
//				price = products_data.getDouble("PRICE");
				product_supplier_data.put("PRICE", price.toString());

				product_hashtable.put(product_id, product_supplier_data);
			}
		} catch (SQLException e) {
			System.out.println("Error in products data");
			e.printStackTrace();
			return;
		}
		///////////////////////////////////////////////////////
		String transaction_data_query = "SELECT * FROM transactions";
		ResultSet transactions_data = null;
		Statement transaction_statement = createStatement(connection_db);
		if(transaction_statement == null) {
			System.out.println("Couldn't create transaction statement for query");
			return;
		}
		try {
			transactions_data = transaction_statement.executeQuery(transaction_data_query);
		} catch (SQLException e) {
			System.out.println("Couldn't execute transaction query");
			e.printStackTrace();
			return;
		}
		String TRANSACTION_ID = "";
		String PRODUCT_ID = "";
		String CUSTOMER_ID = "";
		String STORE_ID = "";
		String STORE_NAME = "";
		String TIME_ID = "";
		String T_DATE = "";
		String QUANTITY = "";

		
		Connection connection_star = connectToDatabase("i190422_starschema",userName,pass);
		if(connection_star == null) {
			System.out.println("Couldn't connect to i190422_starschema");
			return;
		}
		Statement sales_fact_star_statement = createStatement(connection_star);
		if(sales_fact_star_statement == null) {
			System.out.println("Couldn't create sales_fact statement for query in star schema");
			return;
		}
		String sales_fact_starDB_insert = "";
		//////////////////////////////////
		//Storing data into star schema
		Statement time_star_statement = createStatement(connection_star);
		if(time_star_statement == null) {
			System.out.println("Couldn't create sales_fact statement for query in star schema");
			return;
		}


		////////////////////////////////////////////////////////////////////
//		Creating statement
		Statement customer_statement_insert = createStatement(connection_star);
		if(customer_statement_insert == null) {
			System.out.println("Couldn't create customer insert statement for insertion");
			return;
		}
		Set<String> keys = customers_hashtable.keySet();
		String customer_starDB_insert = "";
		
		// inserting customers data into star schema from master data 
		for(String key : keys) {
//			 System.out.println(key+"-"+customers_hashtable.get(key));
			 customer_starDB_insert = "INSERT INTO customers VALUES ('"+key+"', '"+customers_hashtable.get(key)+"')";
//			 System.out.println(customer_starDB_insert);
			 try {
				customer_statement_insert.executeUpdate(customer_starDB_insert);
			} catch (SQLException e) {
//				System.out.println("Couldn't insert customer data: "+key+":"+customers_hashtable.get(key)+", into star schema customer table");
//				e.printStackTrace();
//				return;
			}
		}
		////////////////////////////////////////////////////////////////////
//		Creating statement
		Statement product_star_statement = createStatement(connection_star);
		if(product_star_statement == null) {
			System.out.println("Couldn't create product statement for query in star schema");
			return;
		}
		Statement supplier_star_statement = createStatement(connection_star);
		if(supplier_star_statement == null) {
			System.out.println("Couldn't create supplier statement for query in star schema");
			return;
		}
		Statement product_statement_insert = createStatement(connection_star);
		if(product_statement_insert == null) {
			System.out.println("Couldn't create product insert statement for insertion");
			return;
		}
		Statement supplier_statement_insert = createStatement(connection_star);
		if(supplier_statement_insert == null) {
			System.out.println("Couldn't create supplier insert statement for insertion");
			return;
		}
		keys = product_hashtable.keySet();
		String product_starDB_insert = "";
		String supplier_starDB_insert = "";		
		// inserting products and supplier data into star schema from master data 
		for(String key : keys) {
			temp = product_hashtable.get(key);
			product_starDB_insert = "INSERT INTO products VALUES ('"+key+"', '"+temp.get("PRODUCT_NAME")+"', "+temp.get("PRICE")+")";
			supplier_starDB_insert = "INSERT INTO suppliers VALUES ('"+temp.get("SUPPLIER_ID")+"', '"+temp.get("SUPPLIER_NAME")+"')";
			 try {
				 product_statement_insert.executeUpdate(product_starDB_insert);
			} catch (SQLException e) {
			}
			 try {
				supplier_statement_insert.executeUpdate(supplier_starDB_insert);
			} catch (SQLException e) {
			}
		}
		// insert into stores
		////////////////////////////////////////////////////////////////////

		Statement store_statement_insert = createStatement(connection_star);
		if(store_statement_insert == null) {
			System.out.println("Couldn't create stores insert statement for insertion");
			return;
		}
//		keys = stores_hashtable.keySet();
		String store_starDB_insert = "";
		String time_starDB_insert = "";
		String [] dates;
		Double quarter = 0.0;
        List<Map<String, String>> transactions_list = new ArrayList<Map<String, String>>(); 

		try {
			while(transactions_data.next()) {
        		Map<String, String> transaction_map = new HashMap<>();
        		
				TRANSACTION_ID = transactions_data.getString("TRANSACTION_ID");
				transaction_map.put("TRANSACTION_ID",TRANSACTION_ID);
				
				PRODUCT_ID = transactions_data.getString("PRODUCT_ID");
				transaction_map.put("PRODUCT_ID", PRODUCT_ID);
				
				CUSTOMER_ID = transactions_data.getString("CUSTOMER_ID");
				transaction_map.put("CUSTOMER_ID",CUSTOMER_ID);
				
				STORE_ID = transactions_data.getString("STORE_ID");
				transaction_map.put("STORE_ID",STORE_ID);
				
				STORE_NAME = transactions_data.getString("STORE_NAME");
				transaction_map.put("STORE_NAME",STORE_NAME);

				try {
					
					store_statement_insert.executeUpdate(store_starDB_insert);
				}
				catch(SQLException e){
//					e.printStackTrace();
				}

				TIME_ID = transactions_data.getString("TIME_ID");
				transaction_map.put("TIME_ID",TIME_ID);

				T_DATE = transactions_data.getString("T_DATE");
				transaction_map.put("T_DATE",T_DATE);
//				System.out.println("date:"+T_DATE);
				QUANTITY = transactions_data.getString("QUANTITY");	
				transaction_map.put("QUANTITY",QUANTITY);
				
				// storing time into star schema
				dates = T_DATE.split("-");
				quarter = Math.ceil(Double.parseDouble(dates[1]) / 3.0);
				time_starDB_insert = "INSERT INTO time_t VALUES ('"+TIME_ID+"', '"+dates[2]+"', '"+dates[1]+"', '"+dates[0]+"', '"+quarter.intValue()+"')";
				try {
					time_star_statement.executeUpdate(time_starDB_insert);			
				}
				catch(SQLException e){
				}
				transactions_list.add(transaction_map);
			}
			
		} catch (SQLException e) {
			System.out.println("Error in transactions data");
//			e.printStackTrace();
//			return ;
		}
		String s_id="";
		String store_id = "";
		String p = "";
		Double sale=0.0;
		Map<String, String> temp_transaction = new HashMap<>();

		for(int i=0; i< transactions_list.size(); i++) {
			temp_transaction = transactions_list.get(i);
			PRODUCT_ID = temp_transaction.get("PRODUCT_ID");
			temp = product_hashtable.get(PRODUCT_ID);
			s_id = temp.get("SUPPLIER_ID");
			store_id = temp.get("STORE_ID");
			CUSTOMER_ID = temp_transaction.get("CUSTOMER_ID");
			TIME_ID = temp_transaction.get("TIME_ID");
			QUANTITY = temp_transaction.get("QUANTITY");
			p = temp.get("PRICE");
			sale = ( Double.parseDouble(QUANTITY) * Double.parseDouble(p));
			sales_fact_starDB_insert = "INSERT INTO sales_fact VALUES ('"+temp_transaction.get("TRANSACTION_ID")+"', '"+PRODUCT_ID+"', '"+s_id+"', '"+store_id+"', '"+CUSTOMER_ID+"', '"+TIME_ID+"', '"+QUANTITY+"', '"+sale+"')";
			
			try {
				sales_fact_star_statement.executeUpdate(sales_fact_starDB_insert);
			}
			catch (SQLException e) {
				e.printStackTrace();
				return;
			}
		}
	}

}
